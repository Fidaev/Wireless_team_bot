import datetime
import schedule
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from Fidaev import Keyboards
from Fidaev import SampleSql
from Fidaev.Create_bot import dp, bot
from Fidaev.Config_bot import admin_id


async def sent_to_admin(dp):
    start_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S:')
    await bot.send_message(chat_id=admin_id, text=f"Start time: {start_time}"
                                                  f"\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print(f'Start time: {start_time}'
          '\nData base connected')


# @dp.message_handler(commands=['start'], state="*")
async def process_start(message: types.Message, state: FSMContext):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ "BSC&RNC"!'
                         '\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!'
                         '\n–ü—Ä–æ—à—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"'
                         '\n\n –ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "Main menu"', reply_markup=Keyboards.registration)
    await state.finish()


# @dp.message_handler(commands=['main_menu'], state="*")
# @dp.message_handler(Text(equals='üîùMain menu', ignore_case=True), state="*")
async def process_menu(message: types.Message, state: FSMContext):
    if await SampleSql.get_user_confirmation(message.from_user.id) == 'YES':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', reply_markup=Keyboards.main_menu)
        await state.finish()
    elif await SampleSql.get_user_confirmation(message.from_user.id) == 'NO':
        await bot.send_message(chat_id=admin_id,
                               text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}(ID: {message.from_user.id}) "
                                    f"–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–æ—Ç (üîùMain menu)")
    #     await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –í–∞—Å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –∂–¥–∏—Ç–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–º')
    # else:
    #     await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')


def register_other_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start, commands=['start'], state="*")
    dp.register_message_handler(process_menu, commands=['main_menu'], state="*")
    dp.register_message_handler(process_menu, Text(equals='üîùMain menu', ignore_case=True), state="*")
    dp.register_message_handler(process_menu, Text(equals='Main menu', ignore_case=True), state="*")
